/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: myMessage.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "myMessage.pb-c.h"
void   request_message__init
                     (RequestMessage         *message)
{
  static const RequestMessage init_value = REQUEST_MESSAGE__INIT;
  *message = init_value;
}
size_t request_message__get_packed_size
                     (const RequestMessage *message)
{
  assert(message->base.descriptor == &request_message__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t request_message__pack
                     (const RequestMessage *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &request_message__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t request_message__pack_to_buffer
                     (const RequestMessage *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &request_message__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
RequestMessage *
       request_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (RequestMessage *)
     protobuf_c_message_unpack (&request_message__descriptor,
                                allocator, len, data);
}
void   request_message__free_unpacked
                     (RequestMessage *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &request_message__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   response_read__init
                     (ResponseRead         *message)
{
  static const ResponseRead init_value = RESPONSE_READ__INIT;
  *message = init_value;
}
size_t response_read__get_packed_size
                     (const ResponseRead *message)
{
  assert(message->base.descriptor == &response_read__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t response_read__pack
                     (const ResponseRead *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &response_read__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t response_read__pack_to_buffer
                     (const ResponseRead *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &response_read__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ResponseRead *
       response_read__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ResponseRead *)
     protobuf_c_message_unpack (&response_read__descriptor,
                                allocator, len, data);
}
void   response_read__free_unpacked
                     (ResponseRead *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &response_read__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   response_write__init
                     (ResponseWrite         *message)
{
  static const ResponseWrite init_value = RESPONSE_WRITE__INIT;
  *message = init_value;
}
size_t response_write__get_packed_size
                     (const ResponseWrite *message)
{
  assert(message->base.descriptor == &response_write__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t response_write__pack
                     (const ResponseWrite *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &response_write__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t response_write__pack_to_buffer
                     (const ResponseWrite *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &response_write__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ResponseWrite *
       response_write__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ResponseWrite *)
     protobuf_c_message_unpack (&response_write__descriptor,
                                allocator, len, data);
}
void   response_write__free_unpacked
                     (ResponseWrite *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &response_write__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
static const ProtobufCFieldDescriptor request_message__field_descriptors[4] =
{
  {
    "type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(RequestMessage, type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "offset",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(RequestMessage, offset),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "content",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_BYTES,
    0,   /* quantifier_offset */
    offsetof(RequestMessage, content),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "size",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(RequestMessage, size),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned request_message__field_indices_by_name[] = {
  2,   /* field[2] = content */
  1,   /* field[1] = offset */
  3,   /* field[3] = size */
  0,   /* field[0] = type */
};
static const ProtobufCIntRange request_message__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor request_message__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "RequestMessage",
  "RequestMessage",
  "RequestMessage",
  "",
  sizeof(RequestMessage),
  4,
  request_message__field_descriptors,
  request_message__field_indices_by_name,
  1,  request_message__number_ranges,
  (ProtobufCMessageInit) request_message__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor response_read__field_descriptors[1] =
{
  {
    "content",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(ResponseRead, content),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned response_read__field_indices_by_name[] = {
  0,   /* field[0] = content */
};
static const ProtobufCIntRange response_read__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor response_read__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ResponseRead",
  "ResponseRead",
  "ResponseRead",
  "",
  sizeof(ResponseRead),
  1,
  response_read__field_descriptors,
  response_read__field_indices_by_name,
  1,  response_read__number_ranges,
  (ProtobufCMessageInit) response_read__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor response_write__field_descriptors[1] =
{
  {
    "writenum",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(ResponseWrite, writenum),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned response_write__field_indices_by_name[] = {
  0,   /* field[0] = writenum */
};
static const ProtobufCIntRange response_write__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor response_write__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ResponseWrite",
  "ResponseWrite",
  "ResponseWrite",
  "",
  sizeof(ResponseWrite),
  1,
  response_write__field_descriptors,
  response_write__field_indices_by_name,
  1,  response_write__number_ranges,
  (ProtobufCMessageInit) response_write__init,
  NULL,NULL,NULL    /* reserved[123] */
};
